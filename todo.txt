Reverb implementation in D:\dev\lib\D\mverb
EQ in D:\dev\lib\D\aqualizer
Modular synth studio: http://www.syntiac.com/studiofactory_download.html
Maybe usable sampler: http://sourceforge.net/projects/highlife/
synths: https://github.com/rjeschke/cetonesynths
        binaries: http://www.kvraudio.com/forum/viewtopic.php?p=4680507#4680507
modular synth: http://code.google.com/p/analog-box/
        binaries: http://sites.google.com/site/analogbox2/download
osx audiounit builder: http://sonicbirth.sourceforge.net/
midi plug: http://www.musophile.com/MidiFo/
        
If requested, PortAudio can clamp out-of range samples and/or dither to a native format.
    http://portaudio.com/docs/v19-doxydocs/api_overview.html
You call Pa_OpenStream() to open a Stream, specifying the Device(s) to use, the number of input and output channels, sample formats, suggested latency values and flags that control dithering, clipping and overflow handling. 

You can stop a running Stream using Pa_StopStream() or Pa_AbortStream() (the Stop function plays out all internally queued audio data, while Abort tries to stop as quickly as possible). An open Stream can be started and stopped multiple times.
By calling Pa_SetStreamFinishedCallback() it is possible to register a special PaStreamFinishedCallback that will be called when the Stream has completed playing any internally queued buffers. This can be used in conjunction with the paComplete stream callback return value (see below) to avoid blocking on a call to Pa_StopStream() while queued audio data is still playing.
Note that even if the stream callback returns paComplete it's still necessary to call Pa_StopStream() or Pa_AbortStream() to enter the stopped state.

You can use the stream callback PaStreamCallbackTimeInfo times in conjunction with timestamps returned by Pa_GetStreamTime() to implement time synchronization schemes such as time aligning your GUI display with rendered audio, or maintaining synchronization between MIDI and audio playback.

Host API and Platform-specific Extensions
The public PortAudio API only exposes functionality that can be provided across all target platforms. In some cases individual native audio APIs offer unique functionality. Some PortAudio Host APIs expose this functionality via Host API-specific extensions. Examples include access to low-level buffering and priority parameters, opening a Stream with only a subset of a Device's channels, or accessing channel metadata such as channel names.

Host API-specific extensions are provided in the form of additional functions and data structures defined in Host API-specific header files found in the /include directory.

Transferring data to/from your application 

Transferring data between PortAudio and your application is typically accomplished using a ring buffer. A buffer is set up to hold approximately one-half second of audio data. During the callback function PortAudio reads data from or writes data to this buffer and keeps track of how much data has been read or written. A separate thread containing a timer "wakes up" at intervals of approximately 10 to 100 milliseconds and reads or writes this data from/to disk, performs graphics operations, memory allocation, etc. which involve calls to the operating system. The program pa_ringbuffer.c, available with the PortAudio source code, can be used for this purpose.

If you are simply capturing audio and writing it to disk or reading audio from disk and playing it to a sound card or audio interface, the blocking interface is suitable. If you are also doing low-latency processing or monitoring then you should use the callback interface. In the callback, read or write your data from/to a ring buffer and then use another thread to perform the file I/O. 

http://www.portaudio.com/trac/wiki/tips/ClickingNoises


Build Debug (with full debug info) / Release DLLs for common 3rd party libs.

See portsmf for midi file handling.

sequencer:
    Add stack traces:
        Prototypes for ddbg functions:
            D:\dev\lib\D\stacktrace\dbghelp.d
    
        StackTrace D2 (can't compile for now)
            Use cv2pdb
            Use newest version of dbg.dll (6.12)
        
        There's a modified druntime in dev\lib,
        apparently supports traces.
        
        There's StackWalk64, see if we can use that:
            http://msdn.microsoft.com/en-us/library/ms680650%28v=vs.85%29.aspx
        
        There's CaptureStackBackTrace:
            http://msdn.microsoft.com/en-us/library/bb204633%28v=vs.85%29.aspx

        StackWalker:
            http://www.codeproject.com/KB/threads/StackWalker.aspx
            http://stackwalker.codeplex.com/ (updated version)
            
        Also see Debug Help Library:
            http://msdn.microsoft.com/en-us/library/ms679309%28VS.85%29.aspx

        Undecorating C++ (see how we could use this with D's demangler
        for D symbols):
            http://msdn.microsoft.com/en-us/library/ms680585%28v=VS.85%29.aspx
            
        Good info on being careful using StackWalk64:
            http://stackoverflow.com/questions/105659/how-can-one-grab-a-stack-trace-in-c/127012#127012
        
        Linux-only:
            http://www.nongnu.org/libunwind/
            
        Talks about core-dumps on Linux, but Windows might have something similar:
            http://stackoverflow.com/questions/4636456/stack-trace-for-c-using-gcc/4708582#4708582
            
        Shows how to use GDB, this might be useful with GDC (although sure about the
        state of DLLs using GDC on Windows):
            http://stackoverflow.com/questions/3151779/how-its-better-to-invoke-gdb-from-program-to-print-its-stacktrace/4611112#4611112
            
        Alternatively, you can just use the built-in Windows Error Reporting to collect crash data:
            http://stackoverflow.com/questions/850617/how-to-extract-debugging-information-from-a-crash/850640#850640
        Many more answers about extracting debug info here:
            http://stackoverflow.com/questions/850617/how-to-extract-debugging-information-from-a-crash
            
        MiniDumpWriteDump:
            http://msdn.microsoft.com/en-us/library/ms680360.aspx
            
        Mozilla implementation:
            http://kb.mozillazine.org/Breakpad
        
        Crash report, good info on using Windbg on dump:
            http://www.codeproject.com/KB/debug/crash_report.aspx
            
        Info on C++ stack trace exceptions:
            http://www.eptacom.net/pubblicazioni/pub_eng/except.html
            
        Post-mortem debugging example:
            http://drdobbs.com/architecture-and-design/185300443
            
        Crash-dump analysis:
            http://msdn.microsoft.com/en-us/library/ee416349.aspx
            
        Bug-trap:
            http://www.codeproject.com/KB/applications/BugTrap.aspx
            http://www.intellesoft.net/bugtrap1.shtml
        
            
    Add logging (find implementations in ng). Maybe its useful over stacktraces.
    
    Other possibly useful things:
        Buffer overruns:
            http://duma.sourceforge.net/
            
        Heap corruption detection:
            http://support.microsoft.com/kb/286470
            
    Preload all audio data so we don't have to wait for libsndfile on entry.
